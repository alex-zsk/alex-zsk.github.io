import{_ as s,c as a,d as e,o as t}from"./app-Cf8250eV.js";const i={};function p(l,n){return t(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="introduction-to-c-language" tabindex="-1"><a class="header-anchor" href="#introduction-to-c-language"><span>Introduction to C Language</span></a></h1><h2 id="what-is-c-language" tabindex="-1"><a class="header-anchor" href="#what-is-c-language"><span>What is C Language</span></a></h2><p>C 語言是一門比較底層的編程語言，可以控制底層硬件和高效的運行效率，因此很多知名的系統和軟件都是用 C 語言編寫，比如 Windows 、MacOS，就連 Python 主要使用的解釋器 CPython 也是用 C 語言開發。</p><h2 id="basic-rules" tabindex="-1"><a class="header-anchor" href="#basic-rules"><span>Basic Rules</span></a></h2><ol><li>C 語言是大小寫敏感 (case sensitive)，大小寫不能混用，即 <code>Printf</code>不等於 <code>printf</code>，否則程序會報錯；</li><li>在 C 語言中，縮進 (indentation) 只是為了便於閱讀，通常不會對程序產生影響，但依舊建議正確使用縮進，方便程序編寫和 debug；</li><li>除非是特定語法要求，否則在程序裡面的空格、空行通常是不影響程序運行。但依舊建議在多行代碼中善用空行作為分隔，以便於閱讀。</li></ol><h2 id="basic-structures" tabindex="-1"><a class="header-anchor" href="#basic-structures"><span>Basic Structures</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Or other instructions</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>#include &lt;stdio.h&gt;</code> : 告訴編譯器需要加載什麼標準庫 (standard libraries)，如同加載插件，通常放置在程序的開頭</p><ul><li><code>stdio</code> : “std” 是 standard，”io” 是 input and output ，也就是用來處理輸入、輸出，所以我們在使用 <code>printf</code>和 <code>scanf</code>函數時要導入這個標准庫。</li></ul></li><li><p><code>int</code> : 用來指定返回 (return) 值的數據類型 (data type)，這個程序是 <code>return 0</code>，所以返回的數據類型是 integer 。</p></li><li><p><code>main()</code> ：</p><ul><li>main 函數是整個程序的入口點，即一開始執行的函數，每個程序只有一個 main 函數；</li><li><code>main()</code>中的括號 <code>()</code> 是用於傳入參數 (parameters)，這個程序括號是空的，代表不接受外部傳入的參數（參數傳入日後再談，現在可以忽略）； <ul><li>有時我們會見到 <code>main(void)</code>，<code>void</code>代表不接受外部傳入的參數，所以 <code>main(void)</code>的效果是等同於 <code>main()</code>。</li></ul></li></ul></li><li><p><code>{}</code>：花括號用於包裹實現這個函數功能的具體代碼。</p></li><li><p><code>printf</code>是指在屏幕上顯示文字，每一個完整語句後面都要加上 <code>;</code>。</p></li><li><p><code>return 0</code> 是指返回一個整數 (integer) 值 <code>0</code>，<code>0</code> 通常表示程序成功執行。</p><ul><li>在 main 函數是可以省略的，因為編譯器會自動添加 <code>return 0</code>，但依舊建議寫上 <code>return 0</code>；</li><li><strong>註：</strong><code>return</code>後面的代碼不會被執行。</li></ul></li></ul><h2 id="basic-syntax" tabindex="-1"><a class="header-anchor" href="#basic-syntax"><span>Basic Syntax</span></a></h2><h3 id="console-output-printf" tabindex="-1"><a class="header-anchor" href="#console-output-printf"><span>Console Output (<code>printf</code>)</span></a></h3><ol><li><code>printf</code> 是 print 和 formatted 的縮寫，意思是格式化打印；</li><li>文字必須要用 雙引號（<code>“”</code>）包裹，代表是字符串常量 (string constant)，如<code>printf(&quot;The text you want to output.&quot;);</code>；</li><li>由於 C 語言中，<code>printf</code>不會自動換行，如果每次輸出都要新開一行，我們要使用轉義符 (escape character)，轉義符是指在字符串中有特殊含義的字符，常用的有 <code>/n</code>，代表換新行 (new line)。</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;It is a string.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;It doesn&#39;t insert a new line.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nIt is a string.\\nIt is a new line.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>輸出結果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">It is a string.It doesn&#39;t insert a new line.</span>
<span class="line">It is a string.</span>
<span class="line">It is a new line.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h3><p>變量 (variable) 是編程語言的一個重要概念，它就像一個儲物櫃，裡面儲存不同類型的值。</p><p>每一個變量都必須由變量名 (variable name) 和數據類型 (data type) 組成，就如同儲物櫃也有不同編號和不同種類。變量不可以存儲不同數據類型的值，比如 integer 類型不能儲存字符串 (string)。</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>我們有時會發現他人用 identifier 指代 variable name，其實識別符 (identifier) 是對變量名、函數名 (function name) 等的統稱。所以在有些時候，變量名 (variable name) 與 識別符 (identifier) 是可以混用的。</p></div><p>同時，在使用變量前，我們都必須定義變量 (declare variable)，否則程序就會找不到要使用的變量名，產生報錯。</p><p>在 C 語言中，我們可以每行定義一個變量，也可以每行定義多個變量，同時我們在定義變量時，也可以選擇賦不賦值 (assign)。並且，在賦值後，我們也可以修改變量的值。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 由於不涉及到 input and output 或其他外部庫，可以不用添加 #include &lt;stdio.h&gt;</span></span>
<span class="line">    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">// 每行定義一個變量</span></span>
<span class="line">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 賦值 a 為 6</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">// 每行定義多個變量，用逗號隔開</span></span>
<span class="line">    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 賦值 d 為 5</span></span>
<span class="line">    </span>
<span class="line">    d <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 修改 d 為 7</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>變量一大用處就是可以自動調整程序輸出的內容，例如當我們使用 <code>printf</code>時，我們可以調用變量來自動調整輸出內容。</p><p>在 C 語言中調用變量，我們需要使用格式說明符 (format specifiers)，本質上屬於變量的佔位符 (placeholder)，用來告訴電腦變量應該放在哪個位置上。integer 的格式說明符是 <code>%d</code>。</p><p>格式如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;text... &lt;%format_specifiers_1&gt; text... &lt;%format_specifiers_2&gt;&quot;</span><span class="token punctuation">,</span> variable_name_1<span class="token punctuation">,</span> variable_name_2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>格式說明符是包裹在雙引號內，代表它是字符串的一部分，之後通過<code>,</code>隔開字符串和變量名，一行可以輸出多個變量。</p><p>每個變量名跟格式說明符是一對一的關係，從左到右按序調用。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Before modification: %d&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    d <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nAfter modification: %d&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 同時輸出多個變量</span></span>
<span class="line">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\na = %d; b=%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>輸出結果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Before modification: 5</span>
<span class="line">After modification: 7</span>
<span class="line">a = 1; b=7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="naming-guidelines-of-identifiers" tabindex="-1"><a class="header-anchor" href="#naming-guidelines-of-identifiers"><span>Naming Guidelines of Identifiers</span></a></h4><ol><li><strong>不可以</strong> 與保留字 (reserved words) / 關鍵詞 (keywords) 相同，即在 C 語言中有特殊意思的詞語，例如 <code>int</code>、<code>return</code>等； <ol><li>有些有標准用途的詞語（例如 <code>main</code>、<code>printf</code>）稱為 predefined identifiers，也強烈不建議作為識別符 (identifier)，以免使程序混淆；</li></ol></li><li>只能包含字母 (A - Z)、數字 (0 - 9) 和下劃線 (<code>_</code>)；</li><li><strong>不可以</strong> 以數字開頭</li></ol><p>為方便程序維護，編程社區也訂立命名規范供程序員遵守：</p><ol><li>清晰易懂、有意義：使他人一眼就看明白標識符的用途；</li><li>保持一致性：程序內使用的命名規則應該是統一的： <ol><li>使用下劃線分隔字母：如 <code>class_num</code>；</li><li>小駝峰命名法（除首個單詞外，每個單詞的首字母大寫）：如 <code>classNum</code>；</li></ol></li><li>整個名字不全部大寫：全大寫是用來表示 constant</li></ol><h3 id="console-input-scanf" tabindex="-1"><a class="header-anchor" href="#console-input-scanf"><span>Console Input (<code>scanf</code>)</span></a></h3><p>一個程序除了輸出內容，它也要能夠接收用戶輸入的值。在 C 語言中，<code>scanf</code>用作接收用戶輸入的值。</p><p><code>scanf</code>需要使用格式說明符 (format specifiers) 來控制傳入的值，並用雙括號包裹。雙括號外面跟著 <code>&amp;&lt;variable name&gt;</code>代表輸入的值傳入到指定的變量名中。要注意的是，變量需要在 <code>scanf</code>之前定義。</p><p>另外，<code>scanf</code> 支持一次性輸入幾個值，使用空格隔開多個輸入值即可。</p><p>由於 C 語言中， <code>printf</code>並不支持自動換行，所以我們可以使用 <code>printf</code>作為提示用戶輸入的文字。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> user_input<span class="token punctuation">;</span> <span class="token comment">// 定義變量 user_input</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please input: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提示用戶輸入</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>user_input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 獲取用戶輸入</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;User inputs %d\\n&quot;</span><span class="token punctuation">,</span> user_input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> user_input_1<span class="token punctuation">,</span> user_input_2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please input 2 number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>user_input_1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>user_input_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一次性獲取兩個用戶輸入</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;First user inputs %d\\nSecond user inputs %d &quot;</span><span class="token punctuation">,</span> user_input_1<span class="token punctuation">,</span> user_input_2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ol><li><a href="https://www.bilibili.com/video/BV1L4z3YaENw?p=5" target="_blank" rel="noopener noreferrer">C 语言的基本结构 | 你必须熟练的让人心疼_哔哩哔哩_bilibili</a></li><li>Lecture Note (01b. C Language Basics)</li><li><a href="%E2%80%9Chttps://www.w3schools.com/c/c_variables_format.php%E2%80%9D">C Format Specifiers</a></li><li></li></ol>`,42)])])}const o=s(i,[["render",p]]),u=JSON.parse('{"path":"/C%20Language/Introduction%20to%20C.html","title":"Introduction to C Language","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"What is C Language","slug":"what-is-c-language","link":"#what-is-c-language","children":[]},{"level":2,"title":"Basic Rules","slug":"basic-rules","link":"#basic-rules","children":[]},{"level":2,"title":"Basic Structures","slug":"basic-structures","link":"#basic-structures","children":[]},{"level":2,"title":"Basic Syntax","slug":"basic-syntax","link":"#basic-syntax","children":[{"level":3,"title":"Console Output (printf)","slug":"console-output-printf","link":"#console-output-printf","children":[]},{"level":3,"title":"Variables","slug":"variables","link":"#variables","children":[]},{"level":3,"title":"Console Input (scanf)","slug":"console-input-scanf","link":"#console-input-scanf","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1759307726000,"contributors":[{"name":"alex","username":"alex","email":"alexzsk-public@outlook.com","commits":6,"url":"https://github.com/alex"}],"changelog":[{"hash":"3163eb79fe290e77d46c16fc3f0de441ad244410","time":1759307726000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Add some content"},{"hash":"2ef68ad112d253f917d366e5d5ff26fd3f36d007","time":1759307390000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Modify some wordings to be more reabable"},{"hash":"96c420c20ec5a59e4b128a129b08d7dffac400c0","time":1759307316000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Modify some wordings to be more reabable"},{"hash":"70efdf62e5948a831d278caa380ab4cf3bc1f565","time":1758898553000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Finish the Introduction to C"},{"hash":"409d8774f42464287658772cc820aa9bc61a6b35","time":1758862007000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Add content"},{"hash":"191d68d99a3665999b1304a4ee81efbcfe93a388","time":1758727238000,"email":"alexzsk-public@outlook.com","author":"alex","message":"Add the Introduction to programming language and C"}]},"filePathRelative":"C Language/Introduction to C.md"}');export{o as comp,u as data};
